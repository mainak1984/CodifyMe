package edu.codifyme.leetcode.practice.string;

/**
 * 389. Find the Difference
 * EASY: https://leetcode.com/problems/find-the-difference/
 *
 * Given two strings s and t which consist of only lowercase letters.
 * String t is generated by random shuffling string s and then add one more letter at a random position.
 * Find the letter that was added in t.
 *
 * Example:
 * Input:
 * s = "abcd"
 * t = "abcde"
 *
 * Output:
 * e
 *
 * Explanation:
 * 'e' is the letter that was added.
 *
 * Approach:
 * Find the sum of target and reduce the sum of source, we get the output
 * Alternately, we can XOR all the chars of target and source. Remaining result will be the diff
 */
public class FindTheDifference {
    public char findTheDifference(String s, String t) {
        int sumS = 0, sumT = 0;
        char[] arrS = s.toCharArray();
        char[] arrT = t.toCharArray();
        for (int i = 0; i < arrS.length; i++) {
            sumS += arrS[i] - 'a';
            sumT += arrT[i] - 'a';
        }
        sumT += arrT[arrT.length - 1] - 'a';
        return (char) (sumT - sumS + 'a');
    }

    // Approach 2:
//    public char findTheDifference(String s, String t) {
////
////        // Initialize ch with 0, because 0 ^ X = X
////        // 0 when XORed with any bit would not change the bits value.
////        char ch = 0;
////
////        // XOR all the characters of both s and t.
////        for (int i = 0; i < s.length(); i += 1) {
////            ch ^= s.charAt(i);
////        }
////        for (int i = 0; i < t.length(); i += 1) {
////            ch ^= t.charAt(i);
////        }
////
////        // What is left after XORing everything is the difference.
////        return ch;
////    }
}
